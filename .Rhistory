dev.off(0)
png("Plot1.png")
par(mfrow=c(1,2))
mns         <- numeric(samplesize)
vrs         <- numeric(samplesize)
temp        <- numeric(iterations)
for (i in 1:samplesize) {
temp[1:iterations]  <-  replicate(iterations,mean(rexp(i,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
}
plot(1:samplesize, mns, type="l", col="blue", xlim=c(0,samplesize), ylim=c(0,5.5),
xlab="Sample size", ylab="Value", main="1000 Iterations exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.6)
lines(1:samplesize, vrs, col="red", lty=4)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.6)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[samplesize],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[samplesize],3))
mns         <- numeric(iterations)
vrs         <- numeric(iterations)
for (i in 1:iterations) {
temp                <-  numeric(i)
temp[1:i]           <-  replicate(i,mean(rexp(samplesize,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
vrs[1]              <-  0
}
plot(1:iterations, mns, type="l", col="blue", xlim=c(0,iterations), ylim=c(0,5.5),
xlab="Iterations", ylab="Value", main="40 Sample exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.6)
lines(1:iterations, vrs, col="red", lty=4)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.6)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[iterations],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[iterations],3))
dev.off(0)
set.seed(516101)
## set.seed(866376)
## set.seed(1234)
lambda      <- 0.2
samplesize  <- 40
iterations  <- 1000
png("Plot1.png")
par(mfrow=c(1,2))
mns         <- numeric(samplesize)
vrs         <- numeric(samplesize)
temp        <- numeric(iterations)
for (i in 1:samplesize) {
temp[1:iterations]  <-  replicate(iterations,mean(rexp(i,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
}
plot(1:samplesize, mns, type="l", col="blue", xlim=c(0,samplesize), ylim=c(0,5.5),
xlab="Sample size", ylab="Value", main="1000 Iterations exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.6)
lines(1:samplesize, vrs, col="red", lty=4)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.6)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[samplesize],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[samplesize],3))
mns         <- numeric(iterations)
vrs         <- numeric(iterations)
for (i in 1:iterations) {
temp                <-  numeric(i)
temp[1:i]           <-  replicate(i,mean(rexp(samplesize,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
vrs[1]              <-  0
}
plot(1:iterations, mns, type="l", col="blue", xlim=c(0,iterations), ylim=c(0,5.5),
xlab="Iterations", ylab="Value", main="40 Sample exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.6)
lines(1:iterations, vrs, col="red", lty=4)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.6)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[iterations],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[iterations],3))
dev.off(0)
set.seed(516101)
## set.seed(866376)
## set.seed(1234)
lambda      <- 0.2
samplesize  <- 40
iterations  <- 1000
mns         <- numeric(samplesize)
vrs         <- numeric(samplesize)
temp        <- numeric(iterations)
for (i in 1:samplesize) {
temp[1:iterations]  <-  replicate(iterations,mean(rexp(i,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
}
plot(1:samplesize, mns, type="l", col="blue", xlim=c(0,samplesize), ylim=c(0,5.5),
xlab="Sample size", ylab="Value", main="1000 Iterations exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.6)
lines(1:samplesize, vrs, col="red", lty=4)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.6)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[samplesize],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[samplesize],3))
?hline()
set.seed(516101)
## set.seed(866376)
## set.seed(1234)
lambda      <- 0.2
samplesize  <- 40
iterations  <- 1000
png("Plot1.png")
par(mfrow=c(1,2))
mns         <- numeric(samplesize)
vrs         <- numeric(samplesize)
temp        <- numeric(iterations)
for (i in 1:samplesize) {
temp[1:iterations]  <-  replicate(iterations,mean(rexp(i,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
}
plot(1:samplesize, mns, type="l", col="blue", xlim=c(0,samplesize), ylim=c(0,5.5),
xlab="Sample size", ylab="Value", main="1000 Iterations exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:samplesize, vrs, col="red", lty=4)
abline(h=5)
abline(h=0.625)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.7)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[samplesize],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[samplesize],3))
mns         <- numeric(iterations)
vrs         <- numeric(iterations)
for (i in 1:iterations) {
temp                <-  numeric(i)
temp[1:i]           <-  replicate(i,mean(rexp(samplesize,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
vrs[1]              <-  0
}
plot(1:iterations, mns, type="l", col="blue", xlim=c(0,iterations), ylim=c(0,5.5),
xlab="Iterations", ylab="Value", main="40 Sample exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:iterations, vrs, col="red", lty=4)
abline(h=5)
abline(h=0.625)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.7)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[iterations],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[iterations],3))
dev.off(0)
par(mfrow=c(1,2))
plot(1:samplesize, mns, type="l", col="blue", xlim=c(0,samplesize), ylim=c(0,5.5),
xlab="Sample size", ylab="Value", main="1000 Iterations exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:samplesize, vrs, col="red", lty=4)
abline(h=5)
abline(h=0.625)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.7)
plot(1:iterations, mns, type="l", col="blue", xlim=c(0,iterations), ylim=c(0,5.5),
xlab="Iterations", ylab="Value", main="40 Sample exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:iterations, vrs, col="red", lty=4)
abline(h=5)
abline(h=0.625)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.7)
set.seed(1234)
lambda      <- 0.2
samplesize  <- 40
iterations  <- 1000
par(mfrow=c(1,2))
mns         <- numeric(samplesize)
vrs         <- numeric(samplesize)
temp        <- numeric(iterations)
for (i in 1:samplesize) {
temp[1:iterations]  <-  replicate(iterations,mean(rexp(i,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
}
plot(1:samplesize, mns, type="l", col="blue", xlim=c(0,samplesize), ylim=c(0,5.5),
xlab="Sample size", ylab="Value", main="1000 Iterations exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:samplesize, vrs, col="red", lty=4)
abline(h=5)
abline(h=0.625)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.7)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[samplesize],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[samplesize],3))
mns         <- numeric(iterations)
vrs         <- numeric(iterations)
for (i in 1:iterations) {
temp                <-  numeric(i)
temp[1:i]           <-  replicate(i,mean(rexp(samplesize,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
vrs[1]              <-  0
}
plot(1:iterations, mns, type="l", col="blue", xlim=c(0,iterations), ylim=c(0,5.5),
xlab="Iterations", ylab="Value", main="40 Sample exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:iterations, vrs, col="red", lty=4)
abline(h=5)
abline(h=0.625)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.7)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[iterations],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[iterations],3))
png("Plot1.png")
par(mfrow=c(1,2))
mns         <- numeric(samplesize)
vrs         <- numeric(samplesize)
temp        <- numeric(iterations)
for (i in 1:samplesize) {
temp[1:iterations]  <-  replicate(iterations,mean(rexp(i,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
}
plot(1:samplesize, mns, type="l", col="blue", xlim=c(0,samplesize), ylim=c(0,5.5),
xlab="Sample size", ylab="Value", main="1000 Iterations exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:samplesize, vrs, col="red", lty=4)
abline(h=5)
abline(h=0.625)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.7)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[samplesize],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[samplesize],3))
mns         <- numeric(iterations)
vrs         <- numeric(iterations)
for (i in 1:iterations) {
temp                <-  numeric(i)
temp[1:i]           <-  replicate(i,mean(rexp(samplesize,lambda)))
mns[i]              <-  mean(temp)
vrs[i]              <-  var(temp)
vrs[1]              <-  0
}
plot(1:iterations, mns, type="l", col="blue", xlim=c(0,iterations), ylim=c(0,5.5),
xlab="Iterations", ylab="Value", main="40 Sample exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:iterations, vrs, col="red", lty=4)
abline(h=5)
abline(h=0.625)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.7)
message("Mean of the ",iterations," means of ",samplesize," = ",round(mns[iterations],3))
message("Variance of the ",iterations," means of ",samplesize," = ",round(vrs[iterations],3))
dev.off(0)
set.seed(1234)
lambda      <- 0.2
samplesize  <- 40
iterations  <- 1000
mnslhs      <- numeric(samplesize)
vrslhs      <- numeric(samplesize)
temp        <- numeric(iterations)
for (i in 1:samplesize) {
temp[1:iterations]  <-  replicate(iterations,mean(rexp(i,lambda)))
mnslhs[i]           <-  mean(temp)
vrslhs[i]           <-  var(temp)
}
## Next for 1 to 1000 iterations of random sample size of 40 (RHS)
mnsrhs      <- numeric(iterations)
vrsrhs      <- numeric(iterations)
for (i in 1:iterations) {
temp                <-  numeric(i)
temp[1:i]           <-  replicate(i,mean(rexp(samplesize,lambda)))
mnsrhs[i]           <-  mean(temp)
vrsrhs[i]           <-  var(temp)
vrsrhs[1]           <-  0
}
par(mfrow = c(1, 2), mgp=c(1.25, 0.5, 0), mar=c(3,4,3,3))
plot(1:samplesize, mnslhs, type="l", col="blue", xlim=c(0,samplesize), ylim=c(0,5.5),
xlab="Sample size", ylab="Value", main="1000 Iterations exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:samplesize, vrslhs, col="red", lty=4)
abline(h=5)
abline(h=0.625)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.7)
plot(1:iterations, mnsrhs, type="l", col="blue", xlim=c(0,iterations), ylim=c(0,5.5),
xlab="Iterations", ylab="Value", main="40 Sample exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:iterations, vrsrhs, col="red", lty=4)
abline(h=5)
abline(h=0.625)
legend("right", legend=c("Mean", "Variance"), lty=c(1,4), col=c("blue", "red"), cex=0.7)
message("Mean of the LHS ",iterations," means of ",samplesize," = ",round(mnslhs[samplesize],3))
message("Variance of the LHS ",iterations," means of ",samplesize," = ",round(vrslhs[samplesize],3))
message("Mean of the RHS ",iterations," means of ",samplesize," = ",round(mns[iterations],3))
message("Variance of the RHS ",iterations," means of ",samplesize," = ",round(vrs[iterations],3))
message("Mean of the LHS ",iterations," means of ",samplesize," = ",round(mnslhs[samplesize],3))
message("Variance of the LHS ",iterations," means of ",samplesize," = ",round(vrslhs[samplesize],3))
message("Mean of the RHS ",iterations," means of ",samplesize," = ",round(mnsrhs[iterations],3))
message("Variance of the RHS ",iterations," means of ",samplesize," = ",round(vrsrhs[iterations],3))
message("LHS mean = ",round(mnslhs[samplesize],3), "RHS mean = ",round(mnsrhs[iterations],3))
message("LHS variance = ",round(vrslhs[samplesize],3), "RHS variance = ",round(vrsrhs[iterations],3))
message("LHS mean = ",round(mnslhs[samplesize],3), "        RHS mean = ",round(mnsrhs[iterations],3))
message("LHS variance = ",round(vrslhs[samplesize],3), "       RHS variance = ",round(vrsrhs[iterations],3))
message("LHS mean = ",round(mnslhs[samplesize],3), "           RHS mean = ",round(mnsrhs[iterations],3))
message("LHS variance = ",round(vrslhs[samplesize],3), "       RHS variance = ",round(vrsrhs[iterations],3))
message("LHS mean     = ",round(mnslhs[samplesize],3), "       RHS mean     = ",round(mnsrhs[iterations],3))
message("LHS variance = ",round(vrslhs[samplesize],3), "       RHS variance = ",round(vrsrhs[iterations],3))
par(mfrow = c(1, 2), mgp=c(1.25, 0.5, 0), mar=c(3,4,3,3))
plot(1:samplesize, mnslhs, type="l", col="blue", xlim=c(0,samplesize), ylim=c(0,5.5),
xlab="Sample size", ylab="Value", main="1000 Iterations exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:samplesize, vrslhs, col="red", lty=4)
abline(h=5, lty=2)
lines(1:samplesize,25/(1:samplesize), lty=2)
legend("right", legend=c("Mean", "Variance", "Theoretical"), lty=c(1,4,2), col=c("blue", "red", "black"), cex=0.7)
plot(1:iterations, mnsrhs, type="l", col="blue", xlim=c(0,iterations), ylim=c(0,5.5),
xlab="Iterations", ylab="Value", main="40 Sample exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:iterations, vrsrhs, col="red", lty=4)
abline(h=5)
abline(h=0.625, lty=2)
set.seed(1234)
lambda      <- 0.2
samplesize  <- 40
iterations  <- 1000
mnslhs      <- numeric(samplesize)
vrslhs      <- numeric(samplesize)
temp        <- numeric(iterations)
for (i in 1:samplesize) {
temp[1:iterations]  <-  replicate(iterations,mean(rexp(i,lambda)))
mnslhs[i]           <-  mean(temp)
vrslhs[i]           <-  var(temp)
}
## Next for 1 to 1000 iterations of random sample size of 40 (RHS)
mnsrhs      <- numeric(iterations)
vrsrhs      <- numeric(iterations)
for (i in 1:iterations) {
temp                <-  numeric(i)
temp[1:i]           <-  replicate(i,mean(rexp(samplesize,lambda)))
mnsrhs[i]           <-  mean(temp)
vrsrhs[i]           <-  var(temp)
vrsrhs[1]           <-  0.625
}
## Now plot the two charts of mean and variance versus sample size and iterations
par(mfrow = c(1, 2), mgp=c(1.25, 0.5, 0), mar=c(3,4,3,3))
plot(1:samplesize, mnslhs, type="l", col="blue", xlim=c(0,samplesize), ylim=c(0,5.5),
xlab="Sample size", ylab="Value", main="1000 Iterations exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:samplesize, vrslhs, col="red", lty=4)
abline(h=5, lty=2)
lines(1:samplesize,25/(1:samplesize), lty=2)
legend("right", legend=c("Mean", "Variance", "Theoretical"), lty=c(1,4,2), col=c("blue", "red", "black"), cex=0.7)
plot(1:iterations, mnsrhs, type="l", col="blue", xlim=c(0,iterations), ylim=c(0,5.5),
xlab="Iterations", ylab="Value", main="40 Sample exponential pdf",
cex.axis=0.6, cex.lab=0.6, cex.main=0.7)
lines(1:iterations, vrsrhs, col="red", lty=4)
abline(h=5)
abline(h=0.625, lty=2)
?as.Time
as.Date
?as.Date
x <- as.date("2015-03-14 12:52:32")
x <- as.Date("2015-03-14 12:52:32")
x
x <- as.POSIXct("2015-03-14 12:52:32")
x
y <- strptime(x, "%H:%M:%S")
y
y <- as.POSIXt(x)
y <- format(x, "%H:%M:%S")
y
str(y)
x <- as.POSIXct("2015-03-14 12:52:32")
x
y <- format(x, "%H:%M:%S")
y
str(y)
Url                 <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
dirPath             <- "~/Documents/Data Science Specialisation/5 - Reproducible Research/Project 2"
setwd(dirPath)
if(!file.exists("StormData.csv.bz2")){download.file(Url, destfile="StormData.csv.bz2")}
## Read in the file but only the required variables
variablesNeeded                     <- as.character(c(rep("NULL",37)))
variablesNeeded[c(2,8,26,28)]       <- "character"
variablesNeeded[c(23,24,25,27)]     <- "numeric"
dataStorm               <- read.csv("StormData.csv.bz2", stringsAsFactors = FALSE,
strip.white=TRUE, na.strings = c("NA", ""),
colClasses = variablesNeeded)
## Convert the $BGN_DATE variable to date format
dataStorm$BGN_DATE <- as.Date(dataStorm$BGN_DATE, "%m/%d/%Y")
## Remove all observations pre-1996 (which are deficient according to NWS)
dataStorm                           <- dataStorm[dataStorm$BGN_DATE>as.Date("1995-12-31"),]
# Delete summary rows
dataStorm                           <- dataStorm[-grep("Summary|SUMMARY", dataStorm$EVTYPE), ]
eventNames          <- data.frame(used=character(49), allowed=character(49))
## Now define the allowed event names that will actually be used (48 + "Other")
eventNames$allowed  <- c("Astronomical Low Tide", "Avalanche", "Blizzard",
"Coastal Flood", "Cold/Wind Chill", "Debris Flow", "Dense Fog",
"Dense Smoke", "Drought", "Dust Devil", "Dust Storm", "Excessive Heat",
"Extreme cold/Wind Chill", "Flash Flood", "Flood", "Freezing",
"Frost/Freeze", "Funnel Cloud", "Hail", "Heat", "Heavy Rain",
"Heavy Snow", "High Surf", "High Wind", "Hurricane/Typhoon",
"Ice Storm", "Lakeshore Flood", "Lake-Effect Snow", "Lightning",
"Marine Hail", "Marine High Wind", "Marine Strong Wind",
"Marine Thunderstorm Wind", "Rip Current", "Seiche", "Sleet",
"Storm Tide", "Strong Wind", "Thunderstorm Wind", "Tornado",
"Tropical Depression", "Tropical Storm", "Tsunami", "Volcanic Ash",
"Waterspout", "Wildfire", "Winter Storm", "Winter Weather", "Other")
## Define used event names (in the database) including RegEx possibilities
eventNames$used     <- c("Astronomical Low Tide|Low Tide", "Avalanche|Slide|Slump",
"Blizzard", "Coastal Flood|Erosion", "Cold/Wind Chill", "Debris Flow",
"Dense Fog", "Dense Smoke|Smoke", "Drought|Dry|Driest", "Dust Devil|Devel",
"Dust Storm|Blowing Dust|Saharan Dust",
"Excessive Heat|Temperature Record|Record Temp|Record High",
"Extreme cold/Wind Chill|Extreme Cold|Wind Chill|Windchill|Cold|Hypo|Hyper|Cool",
"Flash Flood|Dam Break", "Flood|Fld|Floyd", "Fog|Vog",
"Frost/Freeze|Frost|Freeze|Freezing|Icy|Glaze|Ice",
"Funnel Cloud|Wall Cloud", "Hail", "Heat|Warm|Hot",
"Heavy Rain|Microburst|Wet|Rain|Precip|Downburst",
"Heavy Snow|Snow", "High Surf|Surf", "High Wind|Wind|Wnd",
"Hurricane/Typhoon|Hurricane|Typhoon", "Ice Storm", "Lakeshore Flood",
"Lake-Effect Snow", "Lightning", "Marine Hail", "Marine High Wind",
"Marine Strong Wind|Marine Accident|Drown",
"Marine Thunderstorm Wind|Marine tstm Wind|Coastal Storm",
"Rip Current", "Seiche", "Sleet",
"Storm Tide|Storm Surge|Wave|Seas|Tide|Swell|High Water",
"Strong Wind", "Thunderstorm Wind|tstm|Thunderstorm",
"Tornado|Landspout", "Tropical Depression", "Tropical Storm|Storm",
"Tsunami", "Volcanic Ash|Volcanic", "Waterspout",
"Wildfire|Wild/Forest Fire|Red Flag|Brush Fire", "Winter Storm",
"Winter Weather|Wintry|Winter","Other|None|No Severe|Lights|Monthly Temp")
## Add new event type variable in compliance with the 48 allowed event types + "other"
for (i in 1:nrow(eventNames)){
dataStorm[grepl(eventNames[i,1], dataStorm$EVTYPE, ignore.case = TRUE)]$NWSevents <- eventNames[i,2]
}
## Fix exponent data for the property & crop damage exponent variables
dataStorm[is.na(dataStorm[,6]), 6]  <- "0"
dataStorm[dataStorm[,6] == "B", 6]  <- "9"
dataStorm[dataStorm[,6] == "M", 6]  <- "6"
dataStorm[dataStorm[,6] == "K", 6]  <- "3"
dataStorm[is.na(dataStorm[,8]), 8]  <- "0"
dataStorm[dataStorm[,8] == "B", 8]  <- "9"
dataStorm[dataStorm[,8] == "M", 8]  <- "6"
dataStorm[dataStorm[,8] == "K", 8]  <- "3"
dataStorm$RWSevents <- NULL
for (i in 1:nrow(eventNames)){
dataStorm[grepl(eventNames[i,1], dataStorm$EVTYPE, ignore.case = TRUE)]$NWSevents <- eventNames[i,2]
}
dataStorm$NWSevents <- NULL
for (i in 1:nrow(eventNames)){
dataStorm[grepl(eventNames[i,1], dataStorm$EVTYPE, ignore.case = TRUE)]$NWSevents <- eventNames[i,2]
}
str(dataStorm)
dataStorm$NWSevents <- NULL
dataStorm$NWSevents <- character(nrow(dataStorm))
for (i in 1:nrow(eventNames)){
dataStorm[grepl(eventNames[i,1], dataStorm$EVTYPE, ignore.case = TRUE)]$NWSevents <- eventNames[i,2]
}
for (i in 1:nrow(eventNames)){
dataStorm[grepl(eventNames[i,1], dataStorm$EVTYPE, ignore.case = TRUE), 9] <- eventNames[i,2]
}
head(dataStorm,50)
str(dataStorm)
dataStorm$propertyDamage    <- numeric(nrow(dataStorm))
dataStorm$cropDamage        <- numeric(nrow(dataStorm))
dataStorm$propertyDamage    <- dataStormPROPDMG*10^(as.numeric(dataStorm$PROPDMGEXP))
dataStorm$cropDamage        <- dataStormCROPDMG*10^(as.numeric(dataStorm$CROPDMGEXP))
dataStorm$propertyDamage    <- dataStorm$PROPDMG*10^(as.numeric(dataStorm$PROPDMGEXP))
dataStorm$cropDamage        <- dataStorm$CROPDMG*10^(as.numeric(dataStorm$CROPDMGEXP))
head(dataStorm,50)
head(dataStorm[,9:11],100)
?aggregat
?aggregate
totalInjuries               <- aggregate(INJURIES ~ NWSevents, dataStorm, sum)
totalFatalities             <- aggregate(FATALITIES ~ NWSevents, dataStorm, sum)
totalPropertyDamage         <- aggregate(proprtyDamage ~ NWSevents, dataStorm, sum)
totalPropertyDamage         <- aggregate(propertyDamage ~ NWSevents, dataStorm, sum)
totalCropDamage             <- aggregate(cropDamage ~ NWSevents, dataStorm, sum)
totalCropDamage
totalPropertyDamage
totalInjuries
totalFatalities
?sort
?order
totalInjuries               <- totalInjuries[order(INJURIES,decreasing=TRUE),]
str(totalInjuries)
totalFatalities             <- totalFatalities[order(FATALITIES,decreasing=TRUE),]
totalPropertyDamage         <- totalPropertyDamage[order(propertyDamage,decreasing=TRUE),]
totalInjuries               <- totalInjuries[order(-INJURIES),]
totalInjuries               <- totalInjuries[order(-totalInjuries$INJURIES),]
totalFatalities             <- totalFatalities[order(-totalFatalities$FATALITIES),]
totalPropertyDamage         <- totalPropertyDamage[order(-totalPropertyDamage$propertyDamage),]
totalCropDamage             <- totalCropDamage[order(-totalCropDamage$cropDamage),]
totalInjuries
totalFatalities
totalPropertyDamage
dirPath         <- "~/Documents/Data Science Specialisation/5 - Reproducible Research/RepData_PeerAssessment1"
setwd(dirPath)
activityData                <- read.csv(unz("activity.zip", "activity.csv"))
stepsPerDay                 <- tapply(activityData$steps, activityData$date, sum)
stepsPerDay                 <- stepsPerDay[!is.na(stepsPerDay)]
## Draw histogram, compute and display mean and median value
hist(stepsPerDay, main = "Total steps per day", xlab = "Steps per day", ylab = "Frequency / days",
xaxt = "n", ylim = c(0,20), breaks = 25, col = "lightblue", cex.axis = 0.8)
axis(1, at = seq(from = 0, to = 22000, by = 2000), cex.axis = 0.8)
meanSteps                   <- tapply(activityData$steps, activityData$interval, mean, na.rm = TRUE)
intervals                   <- strptime(sprintf("%04d", as.numeric(names(meanSteps))), format="%H%M")
## Draw line plot and display highest mean steps/interval value and interval
plot(intervals, meanSteps, type="l", main="Mean steps vs interval", xlab="Interval (hh:mm)",
ylab="Mean steps per interval", ylim= c(0,250))
missing                     <- is.na(activityData$steps)
message("No. of missing steps data instances = ", sum(missing))
newActivityData             <- activityData
## Strategy - replace NAs with the relevant (rounded off) interval mean values
## computed without the NAs.
newActivityData[missing,1]  <- round(meanSteps[as.numeric(names(meanSteps)) %in%
newActivityData[missing,3]])
## Compute steps per day and draw new histogram
newStepsPerDay              <- tapply(newActivityData$steps, newActivityData$date, sum)
hist(newStepsPerDay, main = "Total steps per day (NAs replaced)", xlab = "Steps per day",
ylab = "Frequency / days", xaxt="n", ylim = c(0,20), breaks = 25, col = "lightblue", cex.axis = 0.8)
axis(1,  at = seq(from = 0, to = 22000, by = 2000), cex.axis = 0.8)
newActivityData$day         <- weekdays(as.POSIXct((as.character(newActivityData$date))))
newActivityData$day         <- as.factor(ifelse(newActivityData$day %in% c("Saturday", "Sunday"),
"Weekend", "Weekday"))
## Calculate the mean steps per interval for both weekdays and weekends
meanStepsWeekday            <- tapply(newActivityData[newActivityData$day=="Weekday", 1],
newActivityData[newActivityData$day=="Weekday", 3], mean)
meanStepsWeekend            <- tapply(newActivityData[newActivityData$day=="Weekend", 1],
newActivityData[newActivityData$day=="Weekend", 3], mean)
intervals                   <- strptime(sprintf("%04d", as.numeric(names(meanStepsWeekday))), format="%H%M")
str(meanStepsWeekday)
